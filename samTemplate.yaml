AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SAM template for Serverless framework service: '
Resources:
  accountDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: account
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  userDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: user
      AttributeDefinitions:
        - AttributeName: userName
          AttributeType: S
      KeySchema:
        - AttributeName: userName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  panelDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: homex-panel
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  accessLogDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: accesslog
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  interestsDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: interests
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  userinterestsDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: userinterests
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  VerifyToken:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: auth/authHandler.auth
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
  VerifyUser:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /verify
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  HomexcloudApiDemo:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: RP-Dev
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: 'AWS::StackName'
        paths:
          /verify:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyUser.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /account:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Createaccount.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          '/account/{id}':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Listaccount.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Updateaccount.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          /user:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Createuser.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /user/isconfirmed:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Isuserconfirmed.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          '/user/{id}':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Listuser.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/user/{id}/profile':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Updateuserprofile.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/user/{id}/refreshtoken':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Refreshtoken.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/user/{id}/join':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Joinhomexaccount.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/user/{id}/interest':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,post,get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Adduserinterest.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListUserinterest.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,post,get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/account/{id}/user':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListUserByAccount.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          /login:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /logout:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Logout.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /user/resetpasswordcode:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Resetpasswordcode.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /user/resetpassword:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetPassword.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /interest:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,post,get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Addinterestmetdata.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Listinterests.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,post,get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          /user/resendconfirmation:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResendConfirmation.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /homexpanel:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddHomexCloudPanel.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/homexpanel/{id}':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveSlaveHomexCloudPanel.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/account/{id}/homexpanel':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListHomexCloudSlavePanelForAccount.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
          '/account/{id}/homexpanel/{panelId}':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveHomexCloudSlavePanelFromAccount.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''put'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              security:
                - VerifyToken: []
        securityDefinitions:
          VerifyToken:
            type: apiKey
            name: VerifyToken
            in: header
            x-amazon-apigateway-authtype: oauth2
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri:
                'Fn::Sub': >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyToken.Arn}/invocations
              identityValidationExpression: '^x-[a-z]+'
              authorizerResultTtlInSeconds: 60
  VerifyUserLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - VerifyUser
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: VerifyUser
      Principal: apigateway.amazonaws.com
  Createaccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /account
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  CreateaccountLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Createaccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Createaccount
      Principal: apigateway.amazonaws.com
  Listaccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/account/{id}'
            Method: GET
            RestApiId:
              Ref: HomexcloudApiDemo
  VerifyTokenResourcePolicy:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - VerifyToken
          - Arn
      Principal: apigateway.amazonaws.com
      SourceAccount:
        Ref: 'AWS::AccountId'
  ListaccountLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Listaccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Listaccount
      Principal: apigateway.amazonaws.com
  Updateaccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/account/{id}'
            Method: PUT
            RestApiId:
              Ref: HomexcloudApiDemo
  UpdateaccountLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Updateaccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Updateaccount
      Principal: apigateway.amazonaws.com
  Createuser:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  CreateuserLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Createuser
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Createuser
      Principal: apigateway.amazonaws.com
  Isuserconfirmed:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /user/isconfirmed
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  IsuserconfirmedLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Isuserconfirmed
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Isuserconfirmed
      Principal: apigateway.amazonaws.com
  Listuser:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/user/{id}'
            Method: GET
            RestApiId:
              Ref: HomexcloudApiDemo
  ListuserLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Listuser
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Listuser
      Principal: apigateway.amazonaws.com
  Updateuserprofile:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/user/{id}/profile'
            Method: PUT
            RestApiId:
              Ref: HomexcloudApiDemo
  UpdateuserprofileLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Updateuserprofile
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Updateuserprofile
      Principal: apigateway.amazonaws.com
  Refreshtoken:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/user/{id}/refreshtoken'
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  RefreshtokenLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Refreshtoken
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Refreshtoken
      Principal: apigateway.amazonaws.com
  Joinhomexaccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/user/{id}/join'
            Method: PUT
            RestApiId:
              Ref: HomexcloudApiDemo
  JoinhomexaccountLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Joinhomexaccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Joinhomexaccount
      Principal: apigateway.amazonaws.com
  Adduserinterest:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/user/{id}/interest'
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  AdduserinterestLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Adduserinterest
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Adduserinterest
      Principal: apigateway.amazonaws.com
  ListUserByAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/account/{id}/user'
            Method: GET
            RestApiId:
              Ref: HomexcloudApiDemo
  ListUserByAccountLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ListUserByAccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ListUserByAccount
      Principal: apigateway.amazonaws.com
  Login:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /login
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  LoginLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Login
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Login
      Principal: apigateway.amazonaws.com
  Logout:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /logout
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  LogoutLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Logout
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Logout
      Principal: apigateway.amazonaws.com
  Resetpasswordcode:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /user/resetpasswordcode
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  ResetpasswordcodeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Resetpasswordcode
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Resetpasswordcode
      Principal: apigateway.amazonaws.com
  ResetPassword:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /user/resetpassword
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  ResetPasswordLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ResetPassword
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ResetPassword
      Principal: apigateway.amazonaws.com
  Addinterestmetdata:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /interest
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  AddinterestmetdataLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Addinterestmetdata
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Addinterestmetdata
      Principal: apigateway.amazonaws.com
  Listinterests:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /interest
            Method: GET
            RestApiId:
              Ref: HomexcloudApiDemo
  ListinterestsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Listinterests
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Listinterests
      Principal: apigateway.amazonaws.com
  ListUserinterest:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/user/{id}/interest'
            Method: GET
            RestApiId:
              Ref: HomexcloudApiDemo
  ListUserinterestLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ListUserinterest
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ListUserinterest
      Principal: apigateway.amazonaws.com
  ResendConfirmation:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /user/resendconfirmation
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  ResendConfirmationLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ResendConfirmation
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ResendConfirmation
      Principal: apigateway.amazonaws.com
  AddHomexCloudPanel:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /homexpanel
            Method: POST
            RestApiId:
              Ref: HomexcloudApiDemo
  AddHomexCloudPanelLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - AddHomexCloudPanel
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: AddHomexCloudPanel
      Principal: apigateway.amazonaws.com
  RemoveSlaveHomexCloudPanel:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/homexpanel/{id}'
            Method: PUT
            RestApiId:
              Ref: HomexcloudApiDemo
  RemoveSlaveHomexCloudPanelLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - RemoveSlaveHomexCloudPanel
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: RemoveSlaveHomexCloudPanel
      Principal: apigateway.amazonaws.com
  ListHomexCloudSlavePanelForAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/account/{id}/homexpanel'
            Method: GET
            RestApiId:
              Ref: HomexcloudApiDemo
  ListHomexCloudSlavePanelForAccountLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ListHomexCloudSlavePanelForAccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ListHomexCloudSlavePanelForAccount
      Principal: apigateway.amazonaws.com
  RemoveHomexCloudSlavePanelFromAccount:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.handler
      Runtime: nodejs8.10
      CodeUri: >-
        D:\serverless\testrepository.git\trunk\.serverless\homexcloud-api-demo.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          USERS_TABLE: user
          ACCOUNT_TABLE: account
          PANEL_TABLE: homex-panel
          ACCESS_LOG_TABLE: accesslog
          INTERESTS_TABLE: interests
          USERINTERESTS_TABLE: userinterests
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/account/{id}/homexpanel/{panelId}'
            Method: PUT
            RestApiId:
              Ref: HomexcloudApiDemo
  RemoveHomexCloudSlavePanelFromAccountLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - RemoveHomexCloudSlavePanelFromAccount
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: RemoveHomexCloudSlavePanelFromAccount
      Principal: apigateway.amazonaws.com
